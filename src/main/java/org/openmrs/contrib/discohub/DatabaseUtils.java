package org.openmrs.contrib.discohub;

/**
 * Copyright 2015, Namrata Nehete
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

/**
 * @author namratanehete
 * @author sunbiz
 */
public class DatabaseUtils {

    private static final String dbURL = "jdbc:derby:DiscoHub;create=true;user=App;password=";
    // jdbc Connection
    private static Connection conn = null;
    private static Statement stmt = null;

    public static void setUrlEtag(String url, String etag) {
        try {
            stmt = conn.createStatement();
            int updateCount = stmt.executeUpdate("update url_etag set etag = '" + etag + "' where"
                    + " url = '" + url + "'");
            if (updateCount <= 0) {
                int c = stmt.executeUpdate("INSERT INTO url_etag (url, etag)"
                        + " VALUES ('" + url + "', '" + etag + "')");
            }
            stmt.close();

        } catch (SQLException sqlExcept) {
            System.out.println(sqlExcept.getMessage());
        }
    }

    public static void setUserCommitCount(String username, String githubId, int count, String reponame) {
        try {
            stmt = conn.createStatement();
            int updateCount = stmt.executeUpdate("update userCommits set commitCount = " + count + ", githubId = '" + githubId + "'"
                    + " where username = '" + username + "' and reponame = '" + reponame + "'");
            if (updateCount <= 0) {
                int c = stmt.executeUpdate("INSERT INTO userCommits (username, githubId, commitCount, reponame)"
                        + " VALUES ('" + username + "', '" + githubId + "'," + count + ",'" + reponame + "')");
            }
            stmt.close();

        } catch (SQLException sqlExcept) {
            System.out.println(sqlExcept.getMessage());
        }
    }

    public static int getCommitCountForUser(String username) {
        int count = 0;
        try {
            stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("select sum(commitCount) from userCommits where username = " + username);
            if (rs != null) {
                count = rs.getInt(1);
            }
            rs.close();
            stmt.close();
        } catch (SQLException sqlExcept) {
            System.out.println(sqlExcept.getMessage());
        }
        return count;
    }

    public static String getEtagByUrl(String url) {
        String eTag = "";
        try {
            stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("select etag from userCommits where url = " + url);
            if (rs != null) {
                eTag = rs.getString(1);
            }
            rs.close();
            stmt.close();
        } catch (SQLException sqlExcept) {
            System.out.println(sqlExcept.getMessage());
        }
        return eTag;
    }

    public static void createConnection() {
        try {
            System.setProperty("derby.system.home", System.getProperty("user.home") + "/DiscoHub");
            Class.forName("org.apache.derby.jdbc.EmbeddedDriver").newInstance();
            //Get a connection
            conn = DriverManager.getConnection(dbURL);
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | SQLException ex) {
            System.out.println("error " + ex.getMessage());
        }
    }

    public static void createDb() {
        try {
            System.out.println(" conn " + (conn == null));
            stmt = conn.createStatement();
            stmt.execute("create table url_etag ("
                    + "url varchar(255), "
                    + "etag varchar(255), "
                    + "PRIMARY KEY (url))");

            stmt.execute("create table userCommits ("
                    + "id INTEGER NOT NULL generated by default as identity, "
                    + "username varchar(255), "
                    + "githubId varchar(255), "
                    + "commitCount int, "
                    + "repoName varchar(255), "
                    + "CONSTRAINT primary_key PRIMARY KEY (id))");
            stmt.close();

        } catch (SQLException sqlExcept) {
            System.out.println(sqlExcept.getMessage());
        }
    }

    public static void closeConnection() {
        try {
            if (stmt != null) {
                stmt.close();
            }
            if (conn != null) {
                DriverManager.getConnection(dbURL + ";shutdown=true");
                conn.close();
            }
        } catch (SQLException sqlExcept) {
            System.out.println(sqlExcept.getMessage());
        }

    }
}
